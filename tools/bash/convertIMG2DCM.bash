#!/usr/bin/env bash
#
# This script converts a series of images (e.g. TIFF) into a stack of DICOM images
#

function convertIMG2DCM {
  # The input directory containing the images
  local input_dir="${1}"
  # The desired output directory
  local output_dir="${2}"
  # Desired DICOM series number
  local series_no="${3}"
  # Descired DICOM series description
  local series_description="${4}"
  # Reference DICOM file (to copy DICOM values from)
  local ref_dcm="${5}"

  info "convertIMG2DCM start"

  # Source the common functions for convert2DCM, if necessary
  if [[ ! "$(type -t sourceFunctions2DCM)" = "function" ]]; then
    local __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    source "${__dir}/convert2DCM_common.bash"
  fi

  # Source necessary functions (if necessary)
  sourceFunctions2DCM

  # Get the acquisition number from the reference DICOM
  local acc_no=$(getAccNo "${ref_dcm}")
  info "  Accession Number will be ${acc_no}."

  # Get modality from the reference DICOM
  local modality=$(getDCMTag "${ref_dcm}" "0008,0060")

  # Get the number of original DICOM files and the number of images to be converted back into DICOM
  local no_of_orig_dcms=$(wc -l "${input_dir}/../index-dcm-in" | cut -d" " -f1)
  local no_of_imgs=$(ls -1 "${input_dir}/bia-slice"*.jpg | wc -l)

  # If replace_study_description (see setup.brainstem.bash) has been set, use it to replace the StudyDescription
  local do_replace_study_description=""
  if [[ "$replace_study_description" != "" ]]; then
    do_replace_study_description="--key StudyDescription=${replace_study_description}"
  fi

  # If these values differ, we assume that for example sagittal source images were supplied, whereas only axial slices are generated by our tools
  if [[ $no_of_imgs != $no_of_orig_dcms ]]; then
    warning "    The number of original DICOM files and images to be converted differs (${no_of_imgs} != ${no_of_orig_dcms})."
    warning "    We are assuming that the original images are of non-axial orientation. Some position information will not be transferred."

    # Convert images to DICOM. Meta data will be taken from the reference DICOM file only.
    local slice=001
    while [[ -e "${input_dir}/bia-slice${slice}.jpg" ]]; do
      ${img2dcm} \
        --new-sc \
        --study-from "${ref_dcm}" \
        --key "Manufacturer=BrainImAccs" \
        --key "SeriesNumber=${series_no}" \
        --key "InstanceNumber=$(echo $slice | bc)" \
        --key "SeriesDescription=${series_description}" \
        ${do_replace_study_description} \
        --key "Modality=OT" \
        --key "BodyPartExamined=HEAD" \
        --key "0008,0050=${acc_no}" \
        --key "0008,0005=ISO_IR 192" \
        "${input_dir}/bia-slice${slice}.jpg" \
        "${output_dir}/bia-slice${slice}.dcm" || error "img2dcm failed"

      slice=$(LANG=C printf "%03d" $(echo "$slice + 1" | bc))
    done
  else
    # Convert images to DICOM. Meta data will be taken from the corresponding original DICOM slice
    # At the moment, this only works for axial source images.

    # Copy per slice
    # 0020,1041 SliceLocation
    # 0020,0032 ImagePosition (Patient)
    # 0020,0037 ImageOrientation (Patient)

    cat "${input_dir}/../index-dcm-in" | while read slice ImagePositionPatient dcm; do
      local SliceLocation=$(getDCMTag "${dcm}" "0020,1041" "n")
      local ImageOrientationPatient=$(getDCMTag "${dcm}" "0020,0037" "n")

      ${img2dcm} \
        --new-sc \
        --study-from "${dcm}" \
        --key "Manufacturer=BrainImAccs" \
        --key "SeriesNumber=${series_no}" \
        --key "InstanceNumber=$(echo $slice | bc)" \
        --key "SeriesDescription=${series_description}" \
        ${do_replace_study_description} \
        --key "Modality=OT" \
        --key "BodyPartExamined=HEAD" \
        --key "0008,0050=${acc_no}" \
        --key "0020,1041=$SliceLocation" \
        --key "0020,0032=$ImagePositionPatient" \
        --key "0020,0037=$ImageOrientationPatient" \
        --key "0008,0005=ISO_IR 192" \
        "${input_dir}/bia-slice${slice}.jpg" \
        "${output_dir}/bia-slice${slice}.dcm" || error "img2dcm failed"
    done

    # 0018,0050 SliceThickness
    # 0018,1030 ProtocolName
    # 0018,1310 AcquisitionMatrix
    # 0018,5100 PatientPosition
    # 0020,0052 FrameOfReferenceUID
    # 0028,0030 PixelSpacing

    copy_dcm_tags="
      0018,0050
      0018,1030
      0018,1310
      0018,5100
      0020,0052
      0028,0030
    "

    if [[ ! "$(type -t copyDCMTags)" = "function" ]]; then
      local __dir="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
      source "${__dir}/copyDCMTags.bash"
    fi
    copyDCMTags "${ref_dcm}" "${output_dir}" "${copy_dcm_tags}"
  fi

  # Set Series and Instance UID
  setSeriesAndInstanceUID "${output_dir}"

  info "convertIMG2DCM done"
}

# Export the function to be used when sourced, but do not allow the script to be called directly
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
  export -f convertIMG2DCM
else
  echo "convertIMG2DCM is an internal function and cannot be called directly."
  exit 1
fi
